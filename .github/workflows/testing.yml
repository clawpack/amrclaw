name: Test AMRClaw

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  workflow_dispatch:

permissions:
  contents: read

env:
  CLAW: ${{ github.workspace }}

jobs:
  tests:
    name: >
      Build ${{ matrix.build }} - ${{ matrix.os }} with ${{ matrix.python-version }}.
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Probably want to turn this off for a large matrix
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.12]
        build: [optimized]
        toolchain:
          - {compiler: gcc, version: 14}
          - {compiler: gcc, version: 15}
          # - {compiler: intel, version: '2025.0'}
          # - {compiler: intel-classic, version: '2021.10'}
          # - {compiler: nvidia-hpc, version: '25.1'}
          # - {compiler: lfortran, version: '0.45.0'} # Does not work with meson
        include:
          - os: ubuntu-latest
            build: debug
            python-version: 3.8
        exclude:
          - os: ubuntu-latest
            toolchain: {compiler: gcc, version: 15}
          - os: macos-latest
            toolchain: {compiler: gcc, version: 14}

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up compilers
      uses: fortran-lang/setup-fortran@v1
      id: setup-fortran
      with:
        compiler: ${{ matrix.toolchain.compiler }}
        version: ${{ matrix.toolchain.version }}

    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 meson-python ninja pytest numpy

    - name: Checkout Clawpack
      uses: actions/checkout@v4.1.5
      with:
        repository: clawpack/clawpack
        submodules: true

    - name: Checkout AMRClaw branch
      uses: actions/checkout@v4.1.5
      with:
        path: amrclaw

    - name: Install clawpack python
      run: |
        pip install --no-build-isolation --editable .

    - name: Lint with flake8
      if: ${{ matrix.build == 'debug' }}
      run: |
        cd ${CLAW}/amrclaw
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude dev
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        case "${{ matrix.toolchain.compiler }}" in
          gcc)
            case "${{ matrix.build }}" in
              debug)
                export FFLAGS="-g -Wall -Wextra -Werror"
                export OMP_NUM_THREADS=1
                ;;
              optimized)
                export FFLAGS="-O1"
                export OMP_NUM_THREADS=2
                ;;
              *)
                echo "ERROR: Unknown build type: ${{ matrix.build }}"
                exit 1
                ;;
            esac
          intel)
            case "${{ matrix.build }}" in
              debug)
                export FFLAGS="-g -Wall -Wextra -Werror"
                export OMP_NUM_THREADS=1
                ;;
              optimized)
                export FFLAGS="-O1 -xHost -qopenmp"
                export OMP_NUM_THREADS=2
                ;;
              *)
                echo "ERROR: Unknown build type: ${{ matrix.build }}"
                exit 1
                ;;
            esac
          *)
            echo "ERROR: Unknown compiler: ${{ matrix.toolchain.compiler }}"
            exit 1
            ;;
        esac
        cd ${CLAW}/amrclaw
        pytest

    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test_results
        path: ${{ env.CLAW }}/amrclaw/*_output
        if-no-files-found: ignore
